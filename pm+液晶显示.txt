/*********************************************************************************

**********************************************************************************/
#include <reg52.h>
#include <stdio.h>
#include <intrins.h>

#define MAIN_Fosc		11059200UL	//宏定义主时钟HZ
#define PCF8591_ADDR	0x90		//PCF8591地址


#define LCD1602_DB P0	//LCD1602数据总线

/*====================================
 自定义类型名
====================================*/
typedef unsigned char INT8U;
typedef unsigned char uchar;

typedef unsigned int INT16U;
typedef unsigned int uint;

uchar AD_Value,Value=123;	//存储AD转换回的数字量
uchar qian,bai,shi,ge;

/*====================================
 硬件接口位声明
====================================*/
sbit SDA = P2^6;   //I2C串行数据
sbit SCL = P2^7;   //I2C串行时钟
sbit LED1= P1^0;   //读取AD的值是否成功（亮成功，灭失败）
sbit LED2= P1^1;   //DAC成功输出（亮成功，灭失败）
sbit BEEP= P2^3;   //蜂鸣器引脚定义
sbit ledPower=P1^6;

sbit LCD1602_RS = P3^5;	 //RS端
sbit LCD1602_RW = P3^6;	 //RW端
sbit LCD1602_EN = P3^4;	 //EN端

uchar code table[]={
0xc0,0xf9,0xa4,0xb0,
0x99,0x92,0x82,0xf8,
0x80,0x90,0x88,0x83,
0xc6,0xa1,0x86,0x8e};



/*=================================================
*函数名称：Read_Busy
*函数功能：判断1602液晶忙，并等待
=================================================*/
void Read_Busy()
{
	uchar busy;
	LCD1602_DB = 0xff;//复位数据总线
	LCD1602_RS = 0;	  //拉低RS
	LCD1602_RW = 1;	  //拉高RW读
	do
	{
		LCD1602_EN = 1;//使能EN
		busy = LCD1602_DB;//读回数据
		LCD1602_EN = 0;	 //拉低使能以便于下一次产生上升沿
	}while(busy & 0x80); //判断状态字BIT7位是否为1，为1则表示忙，程序等待
}
/*=================================================
*函数名称：LCD1602_Write_Cmd
*函数功能：写LCD1602命令
*调用：Read_Busy();
*输入：cmd:要写的命令
=================================================*/
void LCD1602_Write_Cmd(uchar cmd)
{
	Read_Busy();	 //判断忙，忙则等待
	LCD1602_RS = 0;
	LCD1602_RW = 0;	//拉低RS、RW操作时序情况1602课件下中文使用说明基本操作时序章节
	LCD1602_DB = cmd;//写入命令
	LCD1602_EN = 1;	 //拉高使能端 数据被传输到LCD1602内
	LCD1602_EN = 0;	 //拉低使能以便于下一次产生上升沿
}
/*=================================================
*函数名称：LCD1602_Write_Dat
*函数功能：写LCD1602数据
*调用：Read_Busy();
*输入：dat：需要写入的数据
=================================================*/
void LCD1602_Write_Dat(uchar dat)
{
	Read_Busy();
	LCD1602_RS = 1;
	LCD1602_RW = 0;
	LCD1602_DB = dat;
	LCD1602_EN = 1;
	LCD1602_EN = 0;
}
/*=================================================
*函数名称：LCD1602_Dis_OneChar
*函数功能：在指定位置显示一个字符
*调用：LCD1602_Write_Cmd(); LCD1602_Write_Dat();	
*输入：x：要显示的横坐标取值0-40，y：要显示的行坐标取值0-1（0为第一行,1为第二行）
		dat：需要显示的数据以ASCLL形式显示
=================================================*/
void LCD1602_Dis_OneChar(uchar x, uchar y,uchar dat)
{
	if(y)	x |= 0x40;
	x |= 0x80;
	LCD1602_Write_Cmd(x);
	LCD1602_Write_Dat(dat);		
}
/*=================================================
*函数名称：LCD1602_Dis_Str
*函数功能：在指定位置显示字符串
*调用：LCD1602_Write_Cmd(); LCD1602_Write_Dat();
*输入：x：要显示的横坐标取值0-40，y：要显示的行坐标取值0-1（0为第一行,1为第二行）
		*str：需要显示的字符串
=================================================*/
void LCD1602_Dis_Str(uchar x, uchar y, uchar *str)
{
	if(y) x |= 0x40;
	x |= 0x80;
	LCD1602_Write_Cmd(x);
	while(*str != '\0')
	{
		LCD1602_Write_Dat(*str++);
	}
}
/*=================================================
*函数名称：Init_LCD1602
*函数功能：1602初始化
*调用：	LCD1602_Write_Cmd();
=================================================*/
void Init_LCD1602()
{
	LCD1602_Write_Cmd(0x38); //	设置16*2显示，5*7点阵，8位数据接口
	LCD1602_Write_Cmd(0x0c); //开显示
	LCD1602_Write_Cmd(0x06); //读写一字节后地址指针加1
	LCD1602_Write_Cmd(0x01); //清除显示
}






////////////////////////////////////////////////////////////////////////






/*====================================
函数：void Delay_Ms(INT16U ms)
参数：ms，毫秒延时形参
描述：12T 51单片机自适应主时钟毫秒级延时函数
====================================*/
void Delay_Ms(INT16U ms)
{
     INT16U i;
	 do{
	      i = MAIN_Fosc / 96000; 
		  while(--i);   //96T per loop
     }while(--ms);
}


/*====================================
函数：void Delay5us()
描述：12T 51单片机5微秒延时函数自适应时钟（11.0592M，12M,22.1184M）
====================================*/
void Delay5us()
{
	#if MAIN_Fosc == 11059200
		_nop_();
	#elif MAIN_Fosc == 12000000
		_nop_();
	#elif MAIN_Fosc == 22118400
		_nop_(); _nop_(); _nop_();
	#endif
}
/*====================================
函数：I2C_init()
描述：I2C总线初始化
====================================*/
void I2C_init()
{
	SDA = 1;   //数据总线高
	_nop_();
	SCL = 1;   //时钟总线高
	_nop_();
}

/*====================================
函数：I2C_Start()
描述：I2C起始信号
====================================*/
void I2C_Start()  
{
	SCL = 1;
	_nop_();
	SDA = 1;
	Delay5us();
	SDA = 0;
	Delay5us();
}

/*====================================
函数：I2C_Stop()
描述：I2C停止信号
====================================*/
void I2C_Stop()
{
	SDA = 0;
	_nop_();
	SCL = 1;
	Delay5us();
	SDA = 1;
	Delay5us();
}

/*====================================
函数：Master_ACK(bit i)
参数：i 为0时发送非应答 为1时发送应答
描述：I2C主机发送应答
====================================*/
void Master_ACK(bit i)	
{
	SCL = 0; // 拉低时钟总线允许SDA数据总线上的数据变化
	_nop_(); // 让总线稳定
	if (i)	 //如果i = 1 那么拉低数据总线 表示主机应答
	{
		SDA = 0;
	}
	else	 
	{
		SDA = 1;	 //发送非应答
	}
	_nop_();//让总线稳定
	SCL = 1;//拉高时钟总线 让从机从SDA线上读走 主机的应答信号
	_nop_();
	SCL = 0;//拉低时钟总线， 占用总线继续通信
	_nop_();
	SDA = 1;//释放SDA数据总线。
	_nop_();
}

/*====================================
函数：Test_ACK()
返回：0为非应答 1为应答
描述：I2C检测从机应答
====================================*/
bit Test_ACK()	 // 检测从机应答
{
	SCL = 1;//时钟总线为高电平期间可以读取从机应答信号
	Delay5us();
	if (SDA)
	{
		SCL = 0;
		I2C_Stop();
		return(0);
	}
	else
	{
		SCL = 0;
		return(1);
	}
}

/*====================================
函数：I2C_send_byte(uchar byte)
参数：byte 要发送的字节
描述：I2C发送一个字节
====================================*/
void I2C_send_byte(uchar byte)
{
	uchar i;
	for(i = 0 ; i < 8 ; i++)
	{
		SCL = 0;
		_nop_();
		if (byte & 0x80)	//
		{
			SDA = 1;
			_nop_();
		}
		else
		{
			SDA = 0;
			_nop_();
		}
		SCL = 1;
		_nop_();
		byte <<= 1;
	}
	SCL = 0;
	_nop_();
	SDA = 1;
	_nop_();	
}

/*====================================
函数：I2C_read_byte()
返回：读取的字节
描述：I2C读一个字节
====================================*/
uchar I2C_read_byte()
{
	uchar i, dat;
	SCL = 0 ;
	_nop_();
	SDA = 1;
	_nop_();
	for(i = 0 ; i < 8 ; i++)
	{
		SCL = 1;
		_nop_();
		dat <<= 1;	  
		if (SDA)
		{
			dat |= 0x01;  
		}
		_nop_();
		SCL = 0;
		_nop_();
	}
	return(dat);
}

/*读AD数据*/
bit ADC_Read(uchar CON)
{
	I2C_Start();
	I2C_send_byte(PCF8591_ADDR+0);
	if (!Test_ACK())
	{
		return(0);
	}
	I2C_send_byte(CON);
	Master_ACK(0);
	I2C_Start();
	I2C_send_byte(PCF8591_ADDR+1);
	if (!Test_ACK())
	{
		return(0);
	}
	AD_Value = I2C_read_byte();
	Master_ACK(0);
	I2C_Stop();
	return(1);	
}




void main()
{
	uchar TestStr[] = {"HU=  % L  % H  %"};
	uchar PM25[] = {"PM=    %L  %H  %"};
	Init_LCD1602();//1602初始化
	LCD1602_Dis_Str(0, 0, &TestStr[0]);	//显示字符串
	LCD1602_Dis_Str(0, 1, &PM25[0]);	//显示字符串
	
	I2C_init();
	
	while(1)
	{
		Value=123;//默认初值
		ledPower=0;
		Delay_Ms(280);
		//单端输入，读出通道3的值,(AD_Value)
		if (ADC_Read(0x03))	LED1 = 0;	else	LED1 = 1;
		Delay_Ms(40);
		ledPower=1;
		if(AD_Value>37)	{Value=(AD_Value/1024-0.0356)*120000*0.035;	LED2=0;}  else LED2=1;
		
		bai=Value/100;		
		shi=Value%100/10;		
		ge=Value%10;

		LCD1602_Dis_OneChar(4,1,0x30+bai);
		LCD1602_Dis_OneChar(5,1,0x30+shi);
		LCD1602_Dis_OneChar(6,1,0x30+ge);
		
		Delay_Ms(1000);
	}
}